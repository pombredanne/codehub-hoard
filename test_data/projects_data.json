{"_index":"projects","_type":"project","_id":"23056647_102626987","_score":1,"_source":{"commits":56,"contributors":3,"contributors_list":[{"avatar_url":"https://avatars1.githubusercontent.com/u/4628742?v=4","profile_url":"https://github.com/wwhyte-si","user_type":"User","username":"wwhyte-si"},{"avatar_url":"https://avatars1.githubusercontent.com/u/7940050?v=4","profile_url":"https://github.com/conz27","user_type":"User","username":"conz27"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"}],"created_at":"2017-09-06T15:40:05Z","forks":{"forkedRepos":[{"id":"1860862_123641608","name":"1609dot2-asn","org_name":"Edon07"}]},"full_name":"usdot-jpo-ode/1609dot2-asn","languages":{},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"ASN.1 schemas for IEEE 1609.2","project_name":"1609dot2-asn","rank":106,"readMe":{"content":"# 1609dot2-asn\nASN.1 schemas for IEEE 1609.2\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/1609dot2-asn/scms-asn-v1.2.1-release/README.md"},"releases":0,"repository":"1609dot2-asn","repository_url":"https://github.com/usdot-jpo-ode/1609dot2-asn","stage_id":"23056647_102626987","stars":1,"suggest":[{"input":["1609dot2-asn"],"output":"1609dot2-asn# name"},{"input":["1609dot2-asn"],"output":"1609dot2-asn# name"},{"input":["ASN1","schemas","for","IEEE","16092"],"output":"1609dot2-asn# description"},{"input":[],"output":"1609dot2-asn# languages"},{"input":["wwhyte-si","conz27","hmusavi"],"output":"1609dot2-asn# contributors"}],"updated_at":"2018-04-16T17:13:53Z","watchers":8}}
{"_index":"projects","_type":"project","_id":"23056647_72044729","_score":1,"_source":{"commits":2302,"contributors":9,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars0.githubusercontent.com/u/23481864?v=4","profile_url":"https://github.com/mgarramo","user_type":"User","username":"mgarramo"},{"avatar_url":"https://avatars0.githubusercontent.com/u/9087336?v=4","profile_url":"https://github.com/0111sandesh","user_type":"User","username":"0111sandesh"},{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"},{"avatar_url":"https://avatars0.githubusercontent.com/u/29639608?v=4","profile_url":"https://github.com/levesque1","user_type":"User","username":"levesque1"},{"avatar_url":"https://avatars2.githubusercontent.com/u/5840989?v=4","profile_url":"https://github.com/lauraGgit","user_type":"User","username":"lauraGgit"},{"avatar_url":"https://avatars2.githubusercontent.com/u/23216443?v=4","profile_url":"https://github.com/ToryB1","user_type":"User","username":"ToryB1"},{"avatar_url":"https://avatars2.githubusercontent.com/u/1664694?v=4","profile_url":"https://github.com/southernsun","user_type":"User","username":"southernsun"}],"created_at":"2016-10-26T21:10:46Z","forks":{"forkedRepos":[{"id":"42840583_152122560","name":"jpo-ode","org_name":"darrelld05"},{"id":"7475771_145814291","name":"jpo-ode","org_name":"kssonu4u"},{"id":"38541284_130270574","name":"jpo-ode","org_name":"MarioDH"},{"id":"32356764_126688467","name":"jpo-ode","org_name":"yangsoso"},{"id":"1860862_123641545","name":"jpo-ode","org_name":"Edon07"},{"id":"1916753_120336776","name":"jpo-ode","org_name":"onthejeep"},{"id":"33533793_118946510","name":"jpo-ode","org_name":"OSUPCVLab"},{"id":"13427284_116835740","name":"jpo-ode","org_name":"wayties"},{"id":"28535848_94336819","name":"jpo-ode","org_name":"DOTAMC"},{"id":"1120608_90075506","name":"jpo-ode","org_name":"kimPerry"},{"id":"11353428_86829378","name":"jpo-ode","org_name":"sharafm2002"},{"id":"12912578_76863396","name":"jpo-ode","org_name":"mvs5465"},{"id":"10130982_75348929","name":"jpo-ode","org_name":"hmusavi"},{"id":"23481864_75121569","name":"jpo-ode","org_name":"mgarramo"},{"id":"5840989_75118639","name":"jpo-ode","org_name":"lauraGgit"}]},"full_name":"usdot-jpo-ode/jpo-ode","language":"Java","languages":{"Batchfile":"1948","C":"4075","CSS":"1617","Dockerfile":"2906","HTML":"4849","Java":"2740483","JavaScript":"3219","Shell":"7650"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"US Department of Transportation (USDOT) Intelligent Transportation Systems Operational Data Environment (ITS ODE). This is the main repository that integrates and coordinates ODE Submodules.","project_name":"jpo-ode","rank":2501,"readMe":{"content":"\n\nMaster: [![Build Status](https://travis-ci.org/usdot-jpo-ode/jpo-ode.svg?branch=master)](https://travis-ci.org/usdot-jpo-ode/jpo-ode) [![Quality Gate](https://sonarcloud.io/api/badges/gate?key=usdot.jpo.ode:jpo-ode)](https://sonarcloud.io/dashboard?id=usdot.jpo.ode%3Ajpo-ode)\n\nDevelop: [![Build Status](https://travis-ci.org/usdot-jpo-ode/jpo-ode.svg?branch=develop)](https://travis-ci.org/usdot-jpo-ode/jpo-ode) [![Quality Gate](https://sonarcloud.io/api/badges/gate?key=usdot.jpo.ode:jpo-ode:develop)](https://sonarcloud.io/dashboard?id=usdot.jpo.ode%3Ajpo-ode%3Adevelop)\n\n# jpo-ode\nUS Department of Transportation (USDOT) Intelligent Transportation Systems Operational Data Environment (ITS ODE)\n\nThe ITS ODE is a real-time virtual data router that ingests and processes operational data from various connected devices - including vehicles, infrastructure, and traffic management centers - and distributes it to other devices and subscribing transportation management applications. Using the ITS ODE within intelligent transportation deployments increases data fluidity and interoperability while meeting operational needs and protecting user privacy. The software’s microservices architecture makes it easy to add new capabilities to meet local needs.\n\n![ODE Dataflows](images/data_flow_v2.png)\n\n<a name=\"toc\"/>\n\n## Table of Contents\n\n[I. Release Notes](#release-notes)\n\n[II. Documentation](#documentation)\n\n[III. Collaboration Tools](#collaboration-tools)\n\n[IV. Getting Started](#getting-started)\n\n[V. Testing the Application](#testing)\n\n[VI. ODE Limitation](#dev-tools)\n\n[VII. Development Tools](#dev-tools)\n\n[VIII. Contribution Information](#contribution-info)\n\n[IX. Troubleshooting](#troubleshooting)\n\n---\n\n<a name=\"release-notes\"/>\n\n\n## [I. Release Notes](ReleaseNotes.md)\n\n\n<a name=\"documentation\"/>\n\n## II. Documentation\nODE provides the following living documents to keep ODE users and stakeholders informed of the latest developments:\n\n1. [ODE Architecture](docs/JPO%20ODE%20Architecture.docx)\n2. [ODE User Guide](docs/JPO_ODE_UserGuide.docx)\n3. [ODE Output Schema Reference Guide](docs/ODE_Output_Schema_Reference.docx)\n4. [ODE REST API Guide](https://usdot-jpo-ode.github.io/)\n5. [ODE Smoke Tests](https://github.com/usdot-jpo-ode/jpo-ode/wiki/JPO-ODE-QA-Documents)\n\nAll stakeholders are invited to provide input to these documents. Stakeholders should direct all input on this document to the JPO Product Owner at DOT, FHWA, and JPO. To provide feedback, we recommend that you create an \"issue\" in this repository (https://github.com/usdot-jpo-ode/jpo-ode/issues). You will need a GitHub account to create an issue. If you don’t have an account, a dialog will be presented to you to create one at no cost.\n\n<a name=\"collaboration-tools\"/>\n\n## III. Collaboration Tools\n\n### Source Repositories - GitHub\n- Main repository on GitHub (public)\n\t- https://github.com/usdot-jpo-ode/jpo-ode\n\t- git@github.com:usdot-jpo-ode/jpo-ode.git\n- Security repository on GitHub (public)\n        - https://github.com/usdot-jpo-ode/jpo-security.git\n\t- git@github.com:usdot-jpo-ode/jpo-security.git\n- Private repository on BitBucket\n\t- https://usdot-jpo-ode@bitbucket.org/usdot-jpo-ode/jpo-ode-private.git\n\t- git@bitbucket.org:usdot-jpo-ode/jpo-ode-private.git\n- Data Privacy Module on Github (public)\n\t- https://github.com/usdot-jpo-ode/jpo-cvdp\n\t- git@github.com/usdot-jpo-ode/jpo-cvdp\n- S3 Depositor Module on Github (public)\n\t- https://github.com/usdot-jpo-ode/jpo-s3-deposit\n\t- gith@github.com/usdot-jpo-ode/jpo-s3-deposit\n\n### Agile Project Management - Jira\nhttps://usdotjpoode.atlassian.net/secure/Dashboard.jspa\n\n### Wiki - Confluence\nhttps://usdotjpoode.atlassian.net/wiki/\n\n### Continuous Integration and Delivery\nhttps://travis-ci.org/usdot-jpo-ode/jpo-ode\n\nTo allow Travis run your build when you push your changes to your public fork of the jpo-ode repository, you must define the following secure environment variable using Travis CLI (https://github.com/travis-ci/travis.rb).\n\nRun:\n\n```\ntravis login --org\n```\nEnter personal github account credentials and then run this:\n\n```\ntravis env set BITBUCKET_UN_APP_PW 'yourbitbucketusername:yourbitbucketpassword' -r yourtravisusername/jpo-ode\n```\n\nThe login information will be saved and this needs to be done only once.\n\nIn order to allow Sonar to run, personal key must be added with this command:\n(Key can be obtained from the JPO-ODE development team)\n\n```\ntravis env set SONAR_SECURITY_TOKEN <key> -pr <user-account>/<repo-name>\n```\n\n### Static Code Analysis\nhttps://sonarcloud.io/organizations/usdot-jpo-ode/projects\n\n[Back to top](#toc)\n\n<a name=\"getting-started\"/>\n\n## IV. Getting Started\n\nThe following instructions describe the procedure to fetch, build, and run the application. If you are installing the ODE in an Ubuntu environment, see this [quick start guide](https://github.com/usdot-jpo-ode/jpo-ode/wiki/Prepare-a-fresh-Ubuntu-instance-for-ODE-installation).\n\n### Prerequisites\n* JDK 1.8: http://www.oracle.com/technetwork/pt/java/javase/downloads/jdk8-downloads-2133151.html\n* Maven: https://maven.apache.org/install.html\n* Git: https://git-scm.com/\n\nAdditionally, read the following guides to familiarize yourself with Docker and Kafka.\n\n**Docker**\n\n[README.md](docker/README.md)\n\n**Kafka**\n\n[README.md](docker/kafka/README.md)\n\n---\n### Obtain the Source Code\n\n**NOTE**: The ODE consists of four repositories:\n\n|Name|Visibility|Description|\n|----|----------|-----------|\n|[jpo-ode](https://github.com/usdot-jpo-ode/jpo-ode)|public|Contains the public components of the application code.|\n|[jpo-cvdp](https://github.com/usdot-jpo-ode/jpo-cvdp)|public|Privacy Protection Module|\n|[jpo-s3-deposit](https://github.com/usdot-jpo-ode/jpo-s3-deposit)|public|S3 depositor service. Optional, comment out of `docker-compose.yml` file if not used.|\n|[jpo-security](https://github.com/usdot-jpo-ode/jpo-security)|public|Security dependencies.|\n|[asn1_codec](https://github.com/usdot-jpo-ode/asn1_codec)|public|ASN.1 Encoder/Decoder module|\n|jpo-ode-private|private|Proprietary dependencies.|\n|[jpo-security-svcs](https://github.com/usdot-jpo-ode/jpo-security-svcs)|public|Provides cryptographic services.|\n\nBuilding this application requires all repositories. If you need access to the private repositories, please reach out to a member of the development team.\n\n\n#### Step 1 - Clone public repository\n\nDisable Git core.autocrlf (Only the First Time)\n**NOTE**: If running on Windows, please make sure that your global git config is set up to not convert End-of-Line characters during checkout. This is important for building docker images correctly.\n\n```bash\ngit config --global core.autocrlf false\n```\n\nClone the source code from the GitHub repository using Git command:\n\n```bash\ngit clone --recurse-submodules https://github.com/usdot-jpo-ode/jpo-ode.git\n```\n\n*Note*: Make sure you specify the --recurse-submodules option on the clone command line. This option will cause the cloning of all dependent submodules:\n- Privacy Protection Module (PPM) - [jpo-cvdp](https://github.com/usdot-jpo-ode/jpo-cvdp)\n- S3 Bucket Depositor - [jpo-s3-deposit](https://github.com/usdot-jpo-ode/jpo-s3-deposit)\n- Security - [jpo-security](https://github.com/usdot-jpo-ode/jpo-security)\n- Security Services Module- [jpo-security](https://github.com/usdot-jpo-ode/jpo-security-svcs)\n- ASN.1 CODEC - [asn1_codec](https://github.com/usdot-jpo-ode/asn1_codec)\n\n#### Step 2 - Clone private repository\n\nClone the source code from the BitBucket repository:\n\n```bash\ngit clone --recurse-submodules https://yourbitbucketusername:yourbitbucketpassword@bitbucket.org/usdot-jpo-ode/jpo-ode-private.git\n```\n\n---\n### Build and Deploy the Application\n\n#### Environment Variables\n\nODE configuration can be customized for every deployment environment using environment variables. These variables can either be set locally or using the *sample.env* file found in the root of the jpo-ode repository.\n\nInstructions for how to use the *sample.env* file can be found [here](https://github.com/usdot-jpo-ode/jpo-ode/wiki/Using-the-.env-configuration-file).\n\n**Important!** \nYou must rename `sample.env` to `.env` for Docker to automatically read the file. This file will contain AWS access keys and other private information. Do not push this file to source control.\n\n#### Build Process\n\n**Note** Docker builds may fail if you are on a corporate network due to DNS resolution errors. \n[See here](https://github.com/usdot-jpo-ode/jpo-ode/wiki/Docker-fix-for-SSL-issues-due-to-corporate-network) for instructions to fix this.\n\n**Note** In order for Docker to automatically read the environment variable file, you must rename it from `sample.env` to `.env`.\n\nThe ODE application uses Maven to manage builds.\n\n**Step 1**: Build the private repository artifacts consisting of J2735 ASN.1 Java API and IEEE1609.2 ASN.1 Java API\n\nNavigate to the root directory of the `jpo-ode-private` project:\n\n```bash\n cd jpo-ode-private/\n mvn clean install\n```\n\n**Step 2**: Build the public 1609.2 Security Library\n```bash\ncd jpo-security\nmvn clean install -DskipTests\n```\n\n**Step 3**: Build the S3 Bucket Depositor Service\n\nNote - if you do not intend on using this feature, edit the docker-compose.yml file and comment out (add a `#` to) the lines including and below `s3dep:`.\n\nNavigate to the root directory of the `jpo-s3-depositor` project:\n\n```bash\nmvn clean compile assembly:single install\n```\n\n**Step 4** (Optional)\nFamiliarize yourself with Docker and follow the instructions in the [README.md](docker/README.md).\n\nIf you wish to change the application properties, such as change the location of the upload service via `ode.uploadLocation.*` properties or set the `ode.kafkaBrokers` to something other than the $DOCKER_HOST_IP:9092, or wish to set the CAS username/password, `ODE_EXTERNAL_IPVs`, etc. instead of setting the environment variables, modify `jpo-ode-svcs\\src\\main\\resources\\application.properties` file as desired.\n\n**Step 5**: Navigate to the root directory of the jpo-ode project.\n\n**Step 6**: Build and deploy the application.\n\nThe easiest way to do this is to run the ```clean-build-and-deploy``` script.\nThis script executes the following commands:\n\n```\n#!/bin/bash\ndocker-compose stop\ndocker-compose rm -f -v\nmvn clean install\ndocker-compose up --build -d\ndocker-compose ps\n```\n\nFor other build options, see the next section. Otherwise, move on to section [V. Testing ODE Application](#testing)\n\n[Back to top](#toc)\n\n---\n### Other Build/Deploy Options\n\n#### Building ODE without Deploying\nTo build the ODE docker container images but not deploy it, run the following commands:\n\n```\n cd jpo-ode (or cd ../jpo-ode if you are in any sub-directory)\n mvn clean install\n docker-compose rm -f -v\n docker-compose build\n```\n\nAlternatively, you may run the ```clean-build``` script.\n\n#### Deploying ODE Application on a Docker Host\nTo deploy the the application on the docker host configured in your DOCKER_HOST_IP machine, run the following:\n\n```bash\ndocker-compose up --no-recreate -d\n```\n\n**NOTE**: It's important to run ```docker-compose up``` with ```no-recreate``` option. Otherwise you may run into [this issue] (https://github.com/wurstmeister/kafka-docker/issues/100).\n\nAlternatively, run ```deploy``` script.\n\nCheck the deployment by running ```docker-compose ps```. You can start and stop containers using ```docker-compose start``` and ```docker-compose stop``` commands.\nIf using the multi-broker docker-compose file, you can change the scaling by running ```docker-compose scale <container>=n``` where container is the container you would like to scale and n is the number of instances. For example, ```docker-compose scale kafka=3```.\n\n#### Running ODE Application on localhost\nYou can run the application on your local machine while other services are deployed on a host environment. To do so, run the following:\n```bash\n docker-compose start zookeeper kafka\n java -jar jpo-ode-svcs/target/jpo-ode-svcs-0.0.1-SNAPSHOT.jar\n```\n\n[Back to top](#toc)\n\n<a name=\"testing\"/>\n\n## V. Testing ODE Application\nOnce the ODE is running, you should be able to access the jpo-ode web UI at `localhost:8080`.\n\n1. Press the `Connect` button to connect to the ODE WebSocket service.\n2. Press `Choose File` button to select an OBU log file containing BSMs and/or TIM messages as specified by the WYDOT CV Pilot project. See below documents for details:\na. [Wyoming CV Pilot Log File Design](data/Wyoming_CV_Pilot_Log_File_Design.docx) \nb. [WYDOT Log Records](data/wydotLogRecords.h) \n3. Press `Upload` button to upload the file to ODE.\n\nUpload records within the files must be embedding BSM and/or TIM messages wrapped in J2735 MessageFrame and ASN.1 UPER encoded, wrapped in IEEE 1609.2 envelope and ASN.1 COER encoded binary format. The following files are a samples of each supported type. Uploading any of the files below will you will observe the decoded messages returned to the web UI page while connected to the WebSocket interface:\n\n - [data/bsmLogDuringEvent.bin](data/bsmLogDuringEvent.bin)\n - [data/bsmLogDuringEvent.gz](data/bsmLogDuringEvent.gz)\n - [data/bsmTx.bin](data/bsmTx.bin)\n - [data/bsmTx.gz](data/bsmTx.gz)\n - [data/dnMsg.bin](data/dnMsg.bin)\n - [data/dnMsg.gz](data/dnMsg.gz)\n - [data/rxMsg_BSM.bin](data/rxMsg_BSM.bin)\n - [data/rxMsg_BSM.gz](data/rxMsg_BSM.gz)\n - [data/rxMsg_TIM.bin](data/rxMsg_TIM.bin)\n - [data/rxMsg_TIM.gz](data/rxMsg_TIM.gz)\n\nAnother way data can be uploaded to the ODE is through copying the file to the location specified by the `ode.uploadLocationRoot/ode.uploadLocationObuLog`property. If not specified,  Default locations would be `uploads/bsmlog`sub-directory off of the location where ODE is launched.\n\nThe result of uploading and decoding of messages will be displayed on the UI screen.\n\n![ODE UI](images/ode-ui.png)\n\n*Notice that the empty fields in the J2735 message are represented by a `null` value. Also note that ODE output strips the MessageFrame header and returns a pure BSM or TIM in the subscription topic.*\n\n### asn1_codec Module (ASN.1 Encoder and Decoder)\nODE requires the deployment of asn1_codec module. ODE's `docker-compose.yml` file is set up to build and deploy the module in a Docker container. If you wish to run `asn1_codec` module outside Docker (i.e. directly on the host machine), please refer to the documentation of `asn1_codec` module.\n\nThe only requirement for deploying `asn1_codec` module on Docker is the setup of two environment variables `DOCKER_HOST_IP` and `DOCKER_SHARED_VOLUME`.\n\n### PPM Module (Geofencing and Filtering)\n\nTo run the ODE with PPM module, you must install and start the PPM service. PPM service communicates with other services through Kafka Topics. PPM will read from the specified \"Raw BSM\" topic and publish the result to the specified \"Filtered Bsm\" topic. These topic names are specified by the following ODE and PPM properties:\n\n - ODE properties for communications with PPM (set in application.properties)\n\t - ode.kafkaTopicBsmRawJson  (default = j2735BsmRawJson)\n\t - ode.kafkaTopicBsmFilteredJson (default = j2735BsmFilteredJson)\n - PPM properties for communications with ODE (set in yourconfig.properties)\n\t - privacy.topic.consumer (default = j2735BsmRawJson)\n\t - privacy.topic.producer (default = j2735BsmFilteredJson)\n\nFollow the instructions [here](https://github.com/usdot-jpo-ode/jpo-cvdp/blob/master/docs/installation.md) (https://github.com/usdot-jpo-ode/jpo-cvdp/blob/master/docs/installation.md) to install and build the PPM service.\n\nDuring the build process, edit the sample config file located in `config/example.properties` and point the property `metadata.broker.list` towards the host of your docker machine or wherever the kafka brokers are hosted. You may use the command `docker-machine ls` to find the kafka service.\n\nAfter a successful build, use the following commands to configure and run the PPM\n\n```\ncd $BASE_PPM_DIR/jpo-cvdp/build\n$ ./bsmjson_privacy -c ../config/ppm.properties\n```\nWith the PPM module running, all filtered BSMs that are uploaded through the web interface will be captured and processed. You will see an output of both submitted BSM and processed data unless the entire record was filtered out.\n\n![PPM](images/PPM.png)\n\n\n[Back to top](#toc)\n\n<a name=\"ode-limitation\"/>\n\n## VI. ODE Limitations\n\nDate: 07/2017\n\nIn its current state, the ODE has been developed to accomplish the goals of data transfer, security, and modularity working with the J2735 and 1609.2 security. The system has been designed to support multiple services orchestrated through the Apache Kafka streaming data pipelines, services built and supported as separate applications and described with each service's repository. As a modular system, each component has been built for functionality first, and additional performance testing is needed to understand the limits of the system with large volumes of data.\n\n<a name=\"dev-tools\"/>\n\n## VII. Development Tools\n\n### Integrated Development Environment (IDE)\n\nInstall the IDE of your choice:\n\n* Eclipse: [https://eclipse.org/](https://eclipse.org/)\n* STS: [https://spring.io/tools/sts/all](https://spring.io/tools/sts/all)\n* IntelliJ: [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\n\n### Continuous Integration and Delivery\n\nTo be added.\n\n### Continous Deployment\n\nTo be added.\n\n<a name=\"contribution-info\"/>\n\n## VIII. Contribution Information\n\nPlease read our [contributing guide](docs/contributing_guide.md) to learn about our development process, how to propose pull requests and improvements, and how to build and test your changes to this project.\n\n<a name=\"troubleshooting\"/>\n\n## IX. Troubleshooting\n\nPlease read our [Wiki](https://github.com/usdot-jpo-ode/jpo-ode/wiki) for more information, or check the [ODE User Guide](https://github.com/usdot-jpo-ode/jpo-ode/raw/develop/docs/JPO_ODE_UserGuide.docx).\n\n[Back to top](#toc)\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-ode/develop/README.md"},"releases":0,"repository":"jpo-ode","repository_url":"https://github.com/usdot-jpo-ode/jpo-ode","stage_id":"23056647_72044729","stars":26,"suggest":[{"input":["jpo-ode"],"output":"jpo-ode# name"},{"input":["jpo-ode"],"output":"jpo-ode# name"},{"input":["US","Department","of","Transportation","USDOT","Intelligent","Transportation","Systems","Operational","Data","Environment","ITS","ODE","This","is","the","main","repository","that","integrates","and","coordinates","ODE","Submodules"],"output":"jpo-ode# description"},{"input":["JavaScript","Shell","CSS","Batchfile","C","HTML","Java","Dockerfile"],"output":"jpo-ode# languages"},{"input":["mvs5465","hmusavi","mgarramo","0111sandesh","tonychen091","levesque1","lauraGgit","ToryB1","southernsun"],"output":"jpo-ode# contributors"}],"updated_at":"2018-11-14T20:55:31Z","watchers":19}}
{"_index":"projects","_type":"project","_id":"23056647_99961005","_score":1,"_source":{"commits":41,"contributors":3,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/1120608?v=4","profile_url":"https://github.com/kimPerry","user_type":"User","username":"kimPerry"},{"avatar_url":"https://avatars2.githubusercontent.com/u/18171845?v=4","profile_url":"https://github.com/angular-cli","user_type":"User","username":"angular-cli"},{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"}],"created_at":"2017-08-10T20:10:24Z","forks":{"forkedRepos":[{"id":"42840583_152477920","name":"jpo-tim-builder","org_name":"darrelld05"},{"id":"13427284_116835718","name":"jpo-tim-builder","org_name":"wayties"},{"id":"2973053_99962922","name":"jpo-tim-builder","org_name":"Trihydro"}]},"full_name":"usdot-jpo-ode/jpo-tim-builder","language":"CSS","languages":{"Batchfile":"5006","CSS":"544829","HTML":"299434","Java":"29619","JavaScript":"305158","Shell":"7058","TypeScript":"46345"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"SUBMODULE: Visual GUI for building TIM messages for testing. Interacts with the ODE RESTful API ","project_name":"jpo-tim-builder","rank":91,"readMe":{"content":"# CV TIM Builder\r\nThe CV TIM Builder is an open source application built to send test TIMs (traveler information messages) to RSUs through the ODE. \r\n\r\n<a name=\"toc\"/>\r\n\r\n## Table of Contents \r\n\r\n[I. Release Notes](#release-notes) \r\n\r\n[II. Documentation](#documentation) \r\n\r\n[III. Getting Started](#getting-started) \r\n\r\n[IV. Running the Application](#running) \r\n\r\n--- \r\n\r\n<a name=\"release-notes\"/>\r\n \r\n## I. Release Notes\r\n\r\n### Release 2\r\n- Added functionality to deposit TIMs to SDW\r\n- NE and SW default lat/longs are at the NW and SE corners of Wyoming\r\n\r\n### Release 1\r\n- Functionality to create and send TIMs to RSUs by building a Path between mileposts\r\n- Functionality to disable TIMs from RSUs\r\n\r\n<a name=\"documentation\"/>\r\n\r\n## II. Documentation\r\nThe TIM Builder has been designed to be configurable enough to work with any group involved with the CV project. It has been integrated with Docker so that it can be deployed on a system without requiring a large list of dependencies. \r\n\r\nThere are three Docker containers used when deploying this application:\r\n\r\n* A MySQL database which contains data for RSUs, milepost locations, and ITIS codes \r\n* A Java Spring REST Service which retreives data from the MySQL database\r\n* An Angular2 web front end for designing TIMs, sending them, and deleting existing TIMs off RSUs\r\n\r\nUsers will need to provides their own data in CSV files which will need to follow the format specified. More information on data entry can be found here (link to service README).  \r\n\r\nThis repository will be continually updated with adjustments to TIM fields.\r\n\r\n## III. Getting Started\r\n\r\nThe following instructions describe the procedure to fetch, build, and run the application. \r\n\r\n### Prerequisites\r\n* JDK 1.8: http://www.oracle.com/technetwork/pt/java/javase/downloads/jdk8-downloads-2133151.html\r\n* Maven: https://maven.apache.org/install.html\r\n* Git: https://git-scm.com/\r\n* Docker: https://docs.docker.com/engine/installation/\r\n\r\n---\r\n### Obtain the Source Code\r\n\r\n#### Step 1 - Clone public repository\r\n\r\nClone the source code from the GitHub repository using Git command:\r\n\r\n```bash\r\ngit clone https://github.com/usdot-jpo-ode/jpo-tim-builder.git\r\n```\r\n\r\n## IV. Running the Application\r\n---\r\n### Build and Deploy the Application\r\n\r\nThe REST service relies on Maven to manage builds and run unit tests.\r\n\r\n**Step 1**: Build the REST service\r\n\r\nNavigate to the service directory and build:\r\n\r\n```bash\r\n cd service/complete\r\n mvn clean install\r\n```\r\nThis build will run unit tests using an in-memory H2 database created with the SQL script unitTestSql.sql located at service\\complete\\src\\main\\resources\\db. \r\n\r\n**Step 2**: Build Docker services \r\n\r\nNavigate back to the root directory and build the Docker services. This may take a some time to complete initially because Docker needs to download Node, and Java. \r\n\r\n```bash\r\n cd ../../\r\n docker-compose build\r\n```\r\n\r\n**Step 3**: Run the application\r\n\r\nThis command will download MySql, and start the MySQL, REST service, and web application containers. The application will then be accessable at  `localhost:4200`. \r\n\r\n```bash\r\n docker-compose up\r\n```\r\n\r\n[Back to top](#toc)\r\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-tim-builder/master/README.md"},"releases":0,"repository":"jpo-tim-builder","repository_url":"https://github.com/usdot-jpo-ode/jpo-tim-builder","stage_id":"23056647_99961005","stars":1,"suggest":[{"input":["jpo-tim-builder"],"output":"jpo-tim-builder# name"},{"input":["jpo-tim-builder"],"output":"jpo-tim-builder# name"},{"input":["SUBMODULE","Visual","GUI","for","building","TIM","messages","for","testing","Interacts","with","the","ODE","RESTful","API"],"output":"jpo-tim-builder# description"},{"input":["JavaScript","Shell","CSS","TypeScript","Batchfile","HTML","Java"],"output":"jpo-tim-builder# languages"},{"input":["kimPerry","angular-cli","tonychen091"],"output":"jpo-tim-builder# contributors"}],"updated_at":"2017-09-15T21:57:50Z","watchers":8}}
{"_index":"projects","_type":"project","_id":"23056647_99942371","_score":1,"_source":{"commits":161,"contributors":5,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/1124162?v=4","profile_url":"https://github.com/jmcarter9t","user_type":"User","username":"jmcarter9t"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars3.githubusercontent.com/u/1867490?v=4","profile_url":"https://github.com/aferber","user_type":"User","username":"aferber"},{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"},{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"}],"created_at":"2017-08-10T16:15:03Z","forks":{"forkedRepos":[{"id":"42840583_152478479","name":"asn1_codec","org_name":"darrelld05"},{"id":"22564381_151737039","name":"asn1_codec","org_name":"ttitamu"},{"id":"39533265_135323692","name":"asn1_codec","org_name":"huemoua"},{"id":"1860862_123641564","name":"asn1_codec","org_name":"Edon07"},{"id":"13427284_116835682","name":"asn1_codec","org_name":"wayties"}]},"full_name":"usdot-jpo-ode/asn1_codec","language":"C++","languages":{"Batchfile":"332","C":"30710","C++":"1447521","CMake":"6941","Python":"1175","Shell":"5793"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"Module to encode and decode ASN.1 streams of messages using Kafka messaging hub for communication with the data source and data destination in a pub/sub scheme.","project_name":"asn1_codec","rank":221,"readMe":{"content":"# Abstract Syntax Notation One (ASN.1) Codec Module for the Operational Data Environment (ODE)\n\nThe ASN.1 Codec Module (ACM) processes Kafka data streams that preset [ODE\nMetadata](https://github.com/usdot-jpo-ode/jpo-ode/blob/develop/docs/metadata_standards.md) wrapped ASN.1 data.  It can perform\none of two functions depending on how it is started:\n\n1. **Decode**: This function is used to process messages *from* the connected\nvehicle environment *to* ODE subscribers. Specifically, the ACM extacts binary\ndata from consumed messages (ODE Metatdata Messages) and decodes the binary\nASN.1 data into a structure that is subsequently encoded into an alternative\nformat more suitable for ODE subscribers (currently XML using XER).\n\n1. **Encode**: This function is used to process messages *from* the ODE *to*\nthe connected vehicle environment. Specifically, the ACM extracts\nhuman-readable data from ODE Metadata and decodes it into a structure that\nis subsequently *encoded into ASN.1 binary data*.\n\n![ASN.1 Codec Operations](docs/graphics/asn1codec-operations.png)\n\n# Table of Contents\n\n1. [Release Notes](#release-notes)\n1. [Getting Involved](#getting-involved)\n1. [Documentation](#documentation)\n1. [Installation](docs/installation.md)\n1. [Configuration and Operation](docs/configuration.md)\n1. [Interface](docs/interface.md)\n1. [Testing](docs/testing.md)\n1. [Project Management](#project-management)\n\n# Release Notes\n\n- ODE-537/581/584/585/586/537: ASN.1 codec module development and integration. \n\n# Getting Involved\n\nThis project is sponsored by the U.S. Department of Transportation and supports Operational Data Environment data type\nconversions. Here are some ways you can start getting involved in this project:\n\n- **Pull the code and check it out!**  The ASN.1 Codec project uses the [Pull Request Model](https://help.github.com/articles/using-pull-requests).\n    - Github has [instructions](https://help.github.com/articles/signing-up-for-a-new-github-account) for setting up an account and getting started with repositories.\n- If you would like to improve this code base or the documentation, [fork the project](https://github.com/usdot-jpo-ode/asn1_codec#fork-destination-box) and submit a pull request.\n- If you find a problem with the code or the documentation, please submit an [issue](https://github.com/usdot-jpo-ode/asn1_codec/issues/new).\n\n## Introduction\n\nThis project uses the [Pull Request Model](https://help.github.com/articles/using-pull-requests). This involves the following project components:\n\n- The usdot-jpo-ode organization project's [master branch](https://github.com/usdot-jpo-ode/asn1_codec).\n- A personal GitHub account.\n- A fork of a project release tag or master branch in your personal GitHub account.\n\nA high level overview of our model and these components is as follows. All work will be submitted via pull requests.\nDevelopers will work on branches on their personal machines (local clients), push these branches to their **personal GitHub repos** and issue a pull\nrequest to the organization asn1_codec project. One the project's main developers must review the Pull Request and merge it\nor, if there are issues, discuss them with the submitter. This will ensure that the developers have a better\nunderstanding of the code base *and* we catch problems before they enter `master`. The following process should be followed:\n\n## Initial Setup\n\n1. If you do not have one yet, create a personal (or organization) account on GitHub (assume your account name is `<your-github-account-name>`).\n1. Log into your personal (or organization) account.\n1. Fork [asn1_codec](https://github.com/usdot-jpo-ode/asn1_codec/fork) into your personal GitHub account.\n1. On your computer (local client), clone the master branch from you GitHub account:\n```bash\n$ git clone https://github.com/<your-github-account-name>/asn1_codec.git\n```\n\n## Additional Resources for Initial Setup\n  \n- [About Git Version Control](http://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)\n- [First-Time Git Setup](http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup)\n- [Article on Forking](https://help.github.com/articles/fork-a-repo)\n\n# Documentation\n\nThis documentation is in the `README.md` file. Additional information can be found using the links in the [Table of\nContents](#table-of-contents).  All stakeholders are invited to provide input to these documents. Stakeholders should\ndirect all input on this document to the JPO Product Owner at DOT, FHWA, or JPO. \n\n## Code Documentation\n\nCode documentation can be generated using [Doxygen](https://www.doxygen.org) by following the commands below:\n\n```bash\n$ sudo apt install doxygen\n$ cd <install root>/asn1_codec\n$ doxygen\n```\n\nThe documentation is in HTML and is written to the `<install root>/asn1_codec/docs/html` directory. Open `index.html` in a\nbrowser.  \n\n## Project Management\n\nThis project is managed using the Jira tool.\n\n- [Jira Project Portal](https://usdotjpoode.atlassian.net/secure/Dashboard.jsp)\n\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/asn1_codec/master/README.md"},"releases":0,"repository":"asn1_codec","repository_url":"https://github.com/usdot-jpo-ode/asn1_codec","stage_id":"23056647_99942371","stars":1,"suggest":[{"input":["asn1_codec"],"output":"asn1_codec# name"},{"input":["asn1_codec"],"output":"asn1_codec# name"},{"input":["Module","to","encode","and","decode","ASN1","streams","of","messages","using","Kafka","messaging","hub","for","communication","with","the","data","source","and","data","destination","in","a","pubsub","scheme"],"output":"asn1_codec# description"},{"input":["Shell","Batchfile","Python","C","C++","CMake"],"output":"asn1_codec# languages"},{"input":["jmcarter9t","hmusavi","aferber","mvs5465","tonychen091"],"output":"asn1_codec# contributors"}],"updated_at":"2018-05-17T23:47:58Z","watchers":8}}
{"_index":"projects","_type":"project","_id":"23056647_95674278","_score":1,"_source":{"commits":37,"contributors":3,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars0.githubusercontent.com/u/9087336?v=4","profile_url":"https://github.com/0111sandesh","user_type":"User","username":"0111sandesh"}],"created_at":"2017-06-28T13:53:03Z","forks":{"forkedRepos":[{"id":"1860862_123641582","name":"jpo-security","org_name":"Edon07"},{"id":"13427284_116835861","name":"jpo-security","org_name":"wayties"}]},"full_name":"usdot-jpo-ode/jpo-security","language":"Java","languages":{"Batchfile":"41","CSS":"1854","Java":"206996","Shell":"28"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"SUBMODULE: 1609.2 Java Security Library for handling security functions of the SCMS. Provided by Leidos for reuse in JPO projects.","project_name":"jpo-security","rank":101,"readMe":{"content":"#  US DOT 1609.2 Security Library\nThis module contains the Java API for handling security functions required by the US DOT Connected Vehicles (CV) Security Credentials Management System (SCMS). This code has been provided by Leidos for reuse in JPO projects. \n\nClick [here](Notes_on_1609.2_Security_Library_Update_6-2-17.pdf) to see the [Release Notes](Notes_on_1609.2_Security_Library_Update_6-2-17.pdf).","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-security/master/README.md"},"releases":0,"repository":"jpo-security","repository_url":"https://github.com/usdot-jpo-ode/jpo-security","stage_id":"23056647_95674278","stars":3,"suggest":[{"input":["jpo-security"],"output":"jpo-security# name"},{"input":["jpo-security"],"output":"jpo-security# name"},{"input":["SUBMODULE","16092","Java","Security","Library","for","handling","security","functions","of","the","SCMS","Provided","by","Leidos","for","reuse","in","JPO","projects"],"output":"jpo-security# description"},{"input":["Java","CSS","Batchfile","Shell"],"output":"jpo-security# languages"},{"input":["mvs5465","hmusavi","0111sandesh"],"output":"jpo-security# contributors"}],"updated_at":"2018-05-17T23:56:54Z","watchers":10}}
{"_index":"projects","_type":"project","_id":"23056647_77352013","_score":1,"_source":{"commits":119,"contributors":26,"contributors_list":[{"avatar_url":"https://avatars1.githubusercontent.com/u/4301434?v=4","profile_url":"https://github.com/wurstmeister","user_type":"User","username":"wurstmeister"},{"avatar_url":"https://avatars1.githubusercontent.com/u/575245?v=4","profile_url":"https://github.com/varju","user_type":"User","username":"varju"},{"avatar_url":"https://avatars0.githubusercontent.com/u/37565?v=4","profile_url":"https://github.com/eliasdorneles","user_type":"User","username":"eliasdorneles"},{"avatar_url":"https://avatars1.githubusercontent.com/u/4031715?v=4","profile_url":"https://github.com/prabhuinbarajan","user_type":"User","username":"prabhuinbarajan"},{"avatar_url":"https://avatars2.githubusercontent.com/u/3822?v=4","profile_url":"https://github.com/filiptepper","user_type":"User","username":"filiptepper"},{"avatar_url":"https://avatars0.githubusercontent.com/u/89186?v=4","profile_url":"https://github.com/bobrik","user_type":"User","username":"bobrik"},{"avatar_url":"https://avatars1.githubusercontent.com/u/106903?v=4","profile_url":"https://github.com/mdlavin","user_type":"User","username":"mdlavin"},{"avatar_url":"https://avatars2.githubusercontent.com/u/746474?v=4","profile_url":"https://github.com/kunickiaj","user_type":"User","username":"kunickiaj"},{"avatar_url":"https://avatars0.githubusercontent.com/u/1446134?v=4","profile_url":"https://github.com/andreimc","user_type":"User","username":"andreimc"},{"avatar_url":"https://avatars0.githubusercontent.com/u/397795?v=4","profile_url":"https://github.com/CRogers","user_type":"User","username":"CRogers"},{"avatar_url":"https://avatars1.githubusercontent.com/u/932644?v=4","profile_url":"https://github.com/chris-zen","user_type":"User","username":"chris-zen"},{"avatar_url":"https://avatars3.githubusercontent.com/u/123595?v=4","profile_url":"https://github.com/dblandin","user_type":"User","username":"dblandin"},{"avatar_url":"https://avatars3.githubusercontent.com/u/326795?v=4","profile_url":"https://github.com/grove","user_type":"User","username":"grove"},{"avatar_url":"https://avatars2.githubusercontent.com/u/1629231?v=4","profile_url":"https://github.com/jdavisonc","user_type":"User","username":"jdavisonc"},{"avatar_url":"https://avatars3.githubusercontent.com/u/5273295?v=4","profile_url":"https://github.com/jzakrzeski","user_type":"User","username":"jzakrzeski"},{"avatar_url":"https://avatars3.githubusercontent.com/u/32574529?v=4","profile_url":"https://github.com/repl-mathieu-fenniak","user_type":"User","username":"repl-mathieu-fenniak"},{"avatar_url":"https://avatars2.githubusercontent.com/u/48936?v=4","profile_url":"https://github.com/thedrow","user_type":"User","username":"thedrow"},{"avatar_url":"https://avatars3.githubusercontent.com/u/400411?v=4","profile_url":"https://github.com/ethx","user_type":"User","username":"ethx"},{"avatar_url":"https://avatars2.githubusercontent.com/u/611122?v=4","profile_url":"https://github.com/tdhopper","user_type":"User","username":"tdhopper"},{"avatar_url":"https://avatars3.githubusercontent.com/u/145250?v=4","profile_url":"https://github.com/zcox","user_type":"User","username":"zcox"},{"avatar_url":"https://avatars1.githubusercontent.com/u/6107881?v=4","profile_url":"https://github.com/d33d33","user_type":"User","username":"d33d33"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars3.githubusercontent.com/u/50812?v=4","profile_url":"https://github.com/pbrisbin","user_type":"User","username":"pbrisbin"},{"avatar_url":"https://avatars2.githubusercontent.com/u/9962080?v=4","profile_url":"https://github.com/pazams","user_type":"User","username":"pazams"},{"avatar_url":"https://avatars1.githubusercontent.com/u/1625151?v=4","profile_url":"https://github.com/sscaling","user_type":"User","username":"sscaling"},{"avatar_url":"https://avatars1.githubusercontent.com/u/11371498?v=4","profile_url":"https://github.com/Writtic","user_type":"User","username":"Writtic"}],"created_at":"2016-12-26T02:17:30Z","forks":{"forkedRepos":[{"id":"1860862_123641657","name":"kafka-docker","org_name":"Edon07"}]},"full_name":"usdot-jpo-ode/kafka-docker","language":"Shell","languages":{"Shell":"3541"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"Dockerfile for Apache Kafka","project_name":"kafka-docker","rank":260,"readMe":{"content":"[![Docker Pulls](https://img.shields.io/docker/pulls/wurstmeister/kafka.svg)](https://hub.docker.com/r/wurstmeister/kafka/)\n[![Docker Stars](https://img.shields.io/docker/stars/wurstmeister/kafka.svg)](https://hub.docker.com/r/wurstmeister/kafka/)\n[![](https://badge.imagelayers.io/wurstmeister/kafka:latest.svg)](https://imagelayers.io/?images=wurstmeister/kafka:latest)\n\nkafka-docker\n============\n\nDockerfile for [Apache Kafka](http://kafka.apache.org/)\n\nThe image is available directly from [Docker Hub](https://hub.docker.com/r/wurstmeister/kafka/)\n\n##Pre-Requisites\n\n- install docker-compose [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)\n- modify the ```KAFKA_ADVERTISED_HOST_NAME``` in ```docker-compose.yml``` to match your docker host IP (Note: Do not use localhost or 127.0.0.1 as the host ip if you want to run multiple brokers.)\n- if you want to customise any Kafka parameters, simply add them as environment variables in ```docker-compose.yml```, e.g. in order to increase the ```message.max.bytes``` parameter set the environment to ```KAFKA_MESSAGE_MAX_BYTES: 2000000```. To turn off automatic topic creation set ```KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'```\n\n##Usage\n\nStart a cluster:\n\n- ```docker-compose up -d ```\n\nAdd more brokers:\n\n- ```docker-compose scale kafka=3```\n\nDestroy a cluster:\n\n- ```docker-compose stop```\n\n##Note\n\nThe default ```docker-compose.yml``` should be seen as a starting point. By default each broker will get a new port number and broker id on restart. Depending on your use case this might not be desirable. If you need to use specific ports and broker ids, modify the docker-compose configuration accordingly, e.g. [docker-compose-single-broker.yml](https://github.com/wurstmeister/kafka-docker/blob/master/docker-compose-single-broker.yml):\n\n- ```docker-compose -f docker-compose-single-broker.yml up```\n\n##Broker IDs\n\nIf you don't specify a broker id in your docker-compose file, it will automatically be generated (see [https://issues.apache.org/jira/browse/KAFKA-1070](https://issues.apache.org/jira/browse/KAFKA-1070). This allows scaling up and down. In this case it is recommended to use the ```--no-recreate``` option of docker-compose to ensure that containers are not re-created and thus keep their names and ids.\n\n\n##Automatically create topics\n\nIf you want to have kafka-docker automatically create topics in Kafka during\ncreation, a ```KAFKA_CREATE_TOPICS``` environment variable can be\nadded in ```docker-compose.yml```.\n\nHere is an example snippet from ```docker-compose.yml```:\n\n        environment:\n          KAFKA_CREATE_TOPICS: \"Topic1:1:3,Topic2:1:1:compact\"\n\n```Topic 1``` will have 1 partition and 3 replicas, ```Topic 2``` will have 1 partition, 1 replica and a `cleanup.policy` set to `compact`.\n\n##Advertised hostname\n\nYou can configure the advertised hostname in different ways\n\n1. explicitly, using ```KAFKA_ADVERTISED_HOST_NAME```\n2. via a command, using ```HOSTNAME_COMMAND```, e.g. ```HOSTNAME_COMMAND: \"route -n | awk '/UG[ \\t]/{print $$2}'\"```\n\nWhen using commands, make sure you review the \"Variable Substitution\" section in [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)\n\nIf ```KAFKA_ADVERTISED_HOST_NAME``` is specified, it takes presendence over ```HOSTNAME_COMMAND```\n\nFor AWS deployment, you can use the Metadata service to get the container host's IP:\n```\nHOSTNAME_COMMAND=wget -t3 -T2 -qO-  http://169.254.169.254/latest/meta-data/local-ipv4\n```\nReference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\n\n## JMX\n\nFor monitoring purposes you may wish to configure JMX. Additional to the standard JMX parameters, problems could arise from the underlying RMI protocol used to connect\n\n* java.rmi.server.hostname - interface to bind listening port\n* com.sun.management.jmxremote.rmi.port - The port to service RMI requests\n\nFor example, to connect to a kafka running locally (assumes exposing port 1099)\n\n      KAFKA_JMX_OPTS: \"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099\"\n      JMX_PORT: 1099\n\nJconsole can now connect at ```jconsole 192.168.99.100:1099```\n\n##Tutorial\n\n[http://wurstmeister.github.io/kafka-docker/](http://wurstmeister.github.io/kafka-docker/)\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/kafka-docker/master/README.md"},"releases":0,"repository":"kafka-docker","repository_url":"https://github.com/usdot-jpo-ode/kafka-docker","stage_id":"23056647_77352013","stars":1,"suggest":[{"input":["kafka-docker"],"output":"kafka-docker# name"},{"input":["kafka-docker"],"output":"kafka-docker# name"},{"input":["Dockerfile","for","Apache","Kafka"],"output":"kafka-docker# description"},{"input":["Shell"],"output":"kafka-docker# languages"},{"input":["wurstmeister","varju","eliasdorneles","prabhuinbarajan","filiptepper","bobrik","mdlavin","kunickiaj","andreimc","CRogers","chris-zen","dblandin","grove","jdavisonc","jzakrzeski","repl-mathieu-fenniak","thedrow","ethx","tdhopper","zcox","d33d33","hmusavi","pbrisbin","pazams","sscaling","Writtic"],"output":"kafka-docker# contributors"}],"updated_at":"2017-04-08T04:10:14Z","watchers":2}}
{"_index":"projects","_type":"project","_id":"23056647_99358953","_score":1,"_source":{"commits":2018,"contributors":16,"contributors_list":[{"avatar_url":"https://avatars2.githubusercontent.com/u/145781?v=4","profile_url":"https://github.com/vlm","user_type":"User","username":"vlm"},{"avatar_url":"https://avatars0.githubusercontent.com/u/6227912?v=4","profile_url":"https://github.com/brchiu","user_type":"User","username":"brchiu"},{"avatar_url":"https://avatars3.githubusercontent.com/u/1236714?v=4","profile_url":"https://github.com/velichkov","user_type":"User","username":"velichkov"},{"avatar_url":"https://avatars2.githubusercontent.com/u/156891?v=4","profile_url":"https://github.com/wiml","user_type":"User","username":"wiml"},{"avatar_url":"https://avatars2.githubusercontent.com/u/8332609?v=4","profile_url":"https://github.com/simo5","user_type":"User","username":"simo5"},{"avatar_url":"https://avatars1.githubusercontent.com/u/2324954?v=4","profile_url":"https://github.com/johvik","user_type":"User","username":"johvik"},{"avatar_url":"https://avatars0.githubusercontent.com/u/254519?v=4","profile_url":"https://github.com/akire","user_type":"User","username":"akire"},{"avatar_url":"https://avatars3.githubusercontent.com/u/18166483?v=4","profile_url":"https://github.com/DanyaFilatov","user_type":"User","username":"DanyaFilatov"},{"avatar_url":"https://avatars1.githubusercontent.com/u/660477?v=4","profile_url":"https://github.com/elfring","user_type":"User","username":"elfring"},{"avatar_url":"https://avatars0.githubusercontent.com/u/1487399?v=4","profile_url":"https://github.com/sleevi","user_type":"User","username":"sleevi"},{"avatar_url":"https://avatars1.githubusercontent.com/u/481351?v=4","profile_url":"https://github.com/theirix","user_type":"User","username":"theirix"},{"avatar_url":"https://avatars1.githubusercontent.com/u/167235?v=4","profile_url":"https://github.com/daa","user_type":"User","username":"daa"},{"avatar_url":"https://avatars2.githubusercontent.com/u/1749243?v=4","profile_url":"https://github.com/basinilya","user_type":"User","username":"basinilya"},{"avatar_url":"https://avatars3.githubusercontent.com/u/1163818?v=4","profile_url":"https://github.com/jariq","user_type":"User","username":"jariq"},{"avatar_url":"https://avatars0.githubusercontent.com/u/444024?v=4","profile_url":"https://github.com/sancane","user_type":"User","username":"sancane"},{"avatar_url":"https://avatars3.githubusercontent.com/u/15227658?v=4","profile_url":"https://github.com/mattipee","user_type":"User","username":"mattipee"}],"created_at":"2017-08-04T16:00:17Z","forks":{"forkedRepos":[{"id":"1860862_123641629","name":"asn1c","org_name":"Edon07"}]},"full_name":"usdot-jpo-ode/asn1c","language":"C","languages":{"C":"1787505","C++":"5778","Lex":"14013","M4":"22203","Makefile":"11982","Objective-C":"5234","Perl":"631","Perl 6":"1073","Shell":"23656","Yacc":"54176"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"The ASN.1 Compiler","project_name":"asn1c","rank":2125,"readMe":{"content":"# About\n\nASN.1 to C compiler takes the ASN.1 module files (example) and generates\nthe C++ compatible C source code. That code can be used to serialize\nthe native C structures into compact and unambiguous BER/XER/PER-based\ndata files, and deserialize the files back.\n\nVarious ASN.1 based formats are widely used in the industry,\nsuch as to encode the X.509 certificates employed in the HTTPS handshake,\nto exchange control data between mobile phones and cellular networks,\nto car-to-car communication in intelligent transportation networks.\n\nThe ASN.1 standard is large and complex and no open source compiler supports\nit in its entirety. The asn1c is arguably the most evolved open source\nASN.1 compiler.\n\n# Build and Install\n\nIf you haven't installed the asn1c yet, read the [INSTALL.md](INSTALL.md) file\nfor a short installation guide.\n\n[![Build Status](https://travis-ci.org/vlm/asn1c.svg?branch=master)](https://travis-ci.org/vlm/asn1c)\n\n# Documentation\n\nFor the list of asn1c command line options, see `asn1c -h` or `man asn1c`.\n\nThe comprehensive documentation on this compiler is in [doc/asn1c-usage.pdf](doc/asn1c-usage.pdf).\n\nPlease also read the [FAQ](FAQ) file.\n\nAn excellent book on ASN.1 is written by Olivier Dubuisson:\n\"ASN.1 Communication between heterogeneous systems\", ISBN:0-12-6333361-0.\n\n# Quick start\n\n(also check out [doc/asn1c-quick.pdf](doc/asn1c-quick.pdf))\n\nAfter installing the compiler (see [INSTALL.md](INSTALL.md)), you may use\nthe asn1c command to compile the ASN.1 specification:\n\n    asn1c <module.asn1>                         # Compile module\n\nIf several specifications contain interdependencies, all of them must be\nspecified at the same time:\n\n    asn1c <module1.asn1> <module2.asn1> ...     # Compile interdependent modules\n\nThe asn1c source tarball contains the [examples/](examples/) directory\nwith several ASN.1 modules and a [script](examples/crfc2asn1.pl)\nto extract the ASN.1 modules from RFC documents.\nRefer to the [examples/README](examples/README) file in that directory.\n\nTo compile the X.509 PKI module:\n\n    ./asn1c/asn1c -P ./examples/rfc3280-*.asn1  # Compile-n-print\n\nIn this example, the **-P** option is to print the compiled text on the\nstandard output. The default behavior is that asn1c compiler creates\nmultiple .c and .h files for every ASN.1 type found inside the specified\nASN.1 modules.\n\nThe compiler's **-E** and **-EF** options are used for testing the parser and\nthe semantic fixer, respectively. These options will instruct the compiler\nto dump out the parsed (and fixed) ASN.1 specification as it was\n\"understood\" by the compiler. It might be useful for checking\nwhether a particular syntactic construction is properly supported\nby the compiler.\n\n    asn1c -EF <module-to-test.asn1>             # Check semantic validity\n\n# Model of operation\n\nThe asn1c compiler works by processing the ASN.1 module specifications\nin several stages:\n\n1. During the first stage, the ASN.1 file is parsed.\n   (Parsing produces an ASN.1 syntax tree for the subsequent levels)\n2. During the second stage, the syntax tree is \"fixed\".\n   (Fixing is a process of checking the tree for semantic errors,\n   accompanied by the tree transformation into the canonical form)\n3. During the third stage, the syntax tree is compiled into the target language.\n\nThere are several command-line options reserved for printing the results\nafter each stage of operation:\n\n    <parser> => print                                       (-E)\n    <parser> => <fixer> => print                            (-E -F)\n    <parser> => <fixer> => <compiler> => print              (-P)\n    <parser> => <fixer> => <compiler> => save-compiled      [default]\n\n\n-- \nLev Walkin\nvlm@lionet.info\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/asn1c/master/README.md"},"releases":0,"repository":"asn1c","repository_url":"https://github.com/usdot-jpo-ode/asn1c","stage_id":"23056647_99358953","stars":1,"suggest":[{"input":["asn1c"],"output":"asn1c# name"},{"input":["asn1c"],"output":"asn1c# name"},{"input":["The","ASN1","Compiler"],"output":"asn1c# description"},{"input":["Shell","Perl","Lex","Objective-C","Makefile","Yacc","M4","C","C++","Perl 6"],"output":"asn1c# languages"},{"input":["vlm","brchiu","velichkov","wiml","simo5","johvik","akire","DanyaFilatov","elfring","sleevi","theirix","daa","basinilya","jariq","sancane","mattipee"],"output":"asn1c# contributors"}],"updated_at":"2017-09-05T16:38:58Z","watchers":6}}
{"_index":"projects","_type":"project","_id":"23056647_129775801","_score":1,"_source":{"commits":195,"contributors":7,"contributors_list":[{"avatar_url":"https://avatars1.githubusercontent.com/u/7940050?v=4","profile_url":"https://github.com/conz27","user_type":"User","username":"conz27"},{"avatar_url":"https://avatars2.githubusercontent.com/u/6707566?v=4","profile_url":"https://github.com/vkumar-si","user_type":"User","username":"vkumar-si"},{"avatar_url":"https://avatars1.githubusercontent.com/u/4628742?v=4","profile_url":"https://github.com/wwhyte-si","user_type":"User","username":"wwhyte-si"},{"avatar_url":"https://avatars0.githubusercontent.com/u/5224646?v=4","profile_url":"https://github.com/davormrkoci","user_type":"User","username":"davormrkoci"},{"avatar_url":"https://avatars3.githubusercontent.com/u/17088771?v=4","profile_url":"https://github.com/aweimerskirch","user_type":"User","username":"aweimerskirch"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars0.githubusercontent.com/u/16580364?v=4","profile_url":"https://github.com/fvillamor","user_type":"User","username":"fvillamor"}],"created_at":"2018-04-16T16:45:34Z","forks":{"forkedRepos":[]},"full_name":"usdot-jpo-ode/jpo-ode-scms-asn","languages":{},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_name":"jpo-ode-scms-asn","rank":254,"readMe":{"content":"# scms-asn\n\nThis repository contains the ASN.1 definitions for data containers and protocols\nused in SCMS.\n\n## Initializing the Git Repository\n\nIt's important to note that this repository contains a Git submodule (i.e. a\ndependency on the 1609.2 public repository). Therefore, doing a simple Git\nclone is not enough to pull down the entire repo.\n\nInstructions to clone the SCMS-ASN repository are as follows:\n\n1. ```git clone http://<username>@stash.campllc.org/scm/scms/scms-asn.git```, where \n'<username>' is your CAMP login.\n\n2. Go into the scms-asn folder and run ```git submodule update --init --recursive``` \nto checkout the 1609.2 repository.\n\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-ode-scms-asn/scms-asn-v1.2.1-release/README.md"},"releases":0,"repository":"jpo-ode-scms-asn","repository_url":"https://github.com/usdot-jpo-ode/jpo-ode-scms-asn","stage_id":"23056647_129775801","stars":0,"suggest":[{"input":["jpo-ode-scms-asn"],"output":"jpo-ode-scms-asn# name"},{"input":["jpo-ode-scms-asn"],"output":"jpo-ode-scms-asn# name"},{"input":[""],"output":"jpo-ode-scms-asn# description"},{"input":[],"output":"jpo-ode-scms-asn# languages"},{"input":["conz27","vkumar-si","wwhyte-si","davormrkoci","aweimerskirch","hmusavi","fvillamor"],"output":"jpo-ode-scms-asn# contributors"}],"updated_at":"2018-04-16T16:47:11Z","watchers":6}}
{"_index":"projects","_type":"project","_id":"23056647_127138533","_score":1,"_source":{"commits":25,"contributors":2,"contributors_list":[{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"}],"created_at":"2018-03-28T12:42:41Z","forks":{"forkedRepos":[]},"full_name":"usdot-jpo-ode/jpo-security-svcs","language":"Java","languages":{"Dockerfile":"672","Java":"7525"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_name":"jpo-security-svcs","rank":66,"readMe":{"content":"\n# jpo-security-svcs\nThis module expopsed a RESTful API for performing cryptographic functions. The following paths identify the functions:\n|Verb|path|Content Type|Functionality|Request Body Format|Response Body Format|\n|--|--|--|--|--|--|\n|POST|/sign|application/json|signs data provided in the body of the request|{\"message\":\"Base64 encoded unsigned data\"}|{\"result\": \"Base64 Encoded Signed Data\"}\n\n## Install\n\n`mvn clean install`\n\n## Run\n\n### Java JAR:\n\n`java -jar target/jpo-security-svcs-0.0.1-SNAPSHOT.jar`\n\n### Docker:\n\n`docker build .`\n\n(Take note of image reported by docker build)\n\n`docker run -p 8090:8090 <image>`\n\n## Test\n\nSend a POST request to `localhost:8090/sign` with a body of the form:\n\n```\n{\n\t\"message\": \"<hex encoded data>\"\n}\n```\n\nExpected output:\n\n```\n{\n\t\"result\": \"<hex encoded data + signature>\"\n}\n```\n\n## Configuration\n\nIn `./src/main/resources/application.properties` you'll find the following properties which can be defined wither on the command line or by environment variable. To define the property on the command line, insert `--` to the front of the Property name, for example, `--server.port=8091`:\n\n| Property | Meaning | Default Value | Environment Variable Substitute |\n| -----------|------------|-----------------|-----------|\n| server.port | The port number to which this service will be listening.| 8090 |SERVER_PORT|\n| sec.cryptoServiceBaseUri | Cryptographic service endpoint URI excluding path. For example, `http://<ip>:<port>` OR `http://server.dns.name` including the port number, if any. | - |SEC_CRYPTO_SERVICE_BASE_URI|\n| sec.cryptoServiceEndpointSignPath | The REST endpoint path of the external service. | /tmc/signtim |SEC_CRYPTO_SERVICE_ENDPOINT_SIGN_PATH|\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-security-svcs/master/README.md"},"releases":0,"repository":"jpo-security-svcs","repository_url":"https://github.com/usdot-jpo-ode/jpo-security-svcs","stage_id":"23056647_127138533","stars":1,"suggest":[{"input":["jpo-security-svcs"],"output":"jpo-security-svcs# name"},{"input":["jpo-security-svcs"],"output":"jpo-security-svcs# name"},{"input":[""],"output":"jpo-security-svcs# description"},{"input":["Java","Dockerfile"],"output":"jpo-security-svcs# languages"},{"input":["hmusavi","mvs5465"],"output":"jpo-security-svcs# contributors"}],"updated_at":"2018-11-13T16:29:03Z","watchers":7}}
{"_index":"projects","_type":"project","_id":"23056647_119436284","_score":1,"_source":{"commits":67,"contributors":1,"contributors_list":[{"avatar_url":"https://avatars1.githubusercontent.com/u/33724014?v=4","profile_url":"https://github.com/andrewm-aero","user_type":"User","username":"andrewm-aero"}],"created_at":"2018-01-29T20:19:43Z","forks":{"forkedRepos":[{"id":"1860862_123641682","name":"per-xer-codec","org_name":"Edon07"}]},"full_name":"usdot-jpo-ode/per-xer-codec","language":"Java","languages":{"C":"12886","Java":"115210","Makefile":"4978","Shell":"620"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"JNI Wrapper for SEMI ASN.1 J2735 Extensions","project_name":"per-xer-codec","rank":107,"readMe":{"content":"# ASN.1 J275 + SEMI Extensions PER-XER Codec\n\nThe PER-XER Codec is an open source library which wraps the C code generated by asn1c in a JNI wrapper.\n\n<a name=\"toc\"/>\n\n## Table of Contents\n\n[I. Release Notes](#release-notes)\n\n[II. Documentation](#documentation)\n\n[III. Getting Started](#getting-started)\n\n[IV. Code Generation](#code-generation)\n\n[V. Building the Library (Combined)](#building)\n\n[VI. Building the Library (Standalone Native)](#building-native)\n\n[VII. Usage](#usage)\n\n---\n\n<a name=\"release-notes\" id=\"release-notes\"/>\n\n## [I. Release Notes](ReleaseNotes.md)\n\n<a name=\"documentation\"/>\n\n## II. Documentation\n\nThis project produces two artifacts: A native-code Shared Object library, and a JAR wrapper around that library.\n\n<a name=\"getting-started\"/>\n\n## III. Getting Started\n\nThe following instructions describe the proceedure to fetch, build, and run the application\n\n### Prerequisites\n* git\n* make\n* java 1.8\n* maven\n* asn1c (See below)\n\n---\n### Obtain the Source Code\n\n#### Step 1 - Clone public repository\n\nClone the source code from the GitHub repository using Git command:\n\n```bash\ngit clone --recurse-submodules https://github.com/usdot-jpo-sdcsdw/per-xer-codec.git\n```\n\n<a name=\"code-generation\"/>\n\n## IV. Code Generation\n\n**Step 1**:  Create the various empty directories that git won't track\n\nNavigate to the codegen directory and run the appropriate make rule\n\n```bash\ncd asn1-codegen\nmake directories\n```\n\n**Step 2**: Add the necessary ASN 1 files\n\n```bash\ncp ... src/asn1/ \n```\n\n**Step 3**: Generate the ASN.1 C code\n\nStill in the codegen directory, run the full make, and then install\n\n```bash\nmake\nmake install\n```\n\nThis will:\n* Build the asn1c compiler\n* Install it into asn1-codegen/install/asn1c\n* Generate the c code using the ASN.1 files provided\n* Move them to the native/src/main/c/asn1 directory \n\n\n<a name=\"building\"/>\n\n## V. Building the Library (Combined)\n\nThis step is for building the library as a complete maven project, which will yield both the JNI Jar, and a native shared object library for it to use.\n\n**Step 1**: Follow the instructions in [IV. Code Generation](#code-generation)\n\n**Step 2**: Build using maven \n\nFrom the root directory, and run the maven install goal\n\n```bash\nmvn install\n```\n\nThe maven configuration is set up to detect what OS you are building on, and will install the appropriate native library. Cross compiling is not currently supported. OSX and Linux are currently the only supported OS's.\n\n<a name=\"building-native\"/>\n\n## VI. Building the Library (Standalone Native)\n\nThis step is for building the native shared library by itself, separate from the JNI wrapper\n\n**Step 1**: Follow the instructions in [IV. Code Generation](#code-generation)\n\n**Step 2**: Build using make\n\nFrom the native directory, run make\n\n```bash\ncd native\nmake\n```\n\nThis makefile supports building the Linux Shared object on OSX, using a docker container, and will detect this automatically\n\nThis will:\n    Produce a docker image capable of building the Linux shared object library\n    Produce a container of that image, and build the shared object in it\n    Copy the built shared object out of the container\n    Delete the container\n\n<a name=\"usage\"/>\n\n## VII. Usage\n\n### Intended Usage\n\nThe primary way to use this module is to include the PerXerCodec class, and use its perToXer and xerToPer methods.\nThese methods require 3 things: A PerData format, a XerData Format, and an Asn1Type.\nAsn1Types can be accessed as static members of PerXerCodec (e.g. ServiceRequestType).\nThe PerData can be any object that implements the PerData interface, Likewise for XerData.\nIf the type of data is unknown, the guessPerToXer and guessXerToPer take multiple possible data types and will try each.\n\n### Maven Dependency\n\nMaven projects which wish to use the codec must declare two dependencies, the java wrapper (per-xer-codec-java), and the appropriate shared object (per-xer-codec-native-osx|linux).\n\nIf you wish to run unit tests in your project which depend on the codec, you will need to ensure the native shared object exists at test run time, and specify the java.library.path to your unit test runner.\n\n### Deploying\n\n**Step 1**: Place the jar file generated by the build process on the classpath\n\n**Step 2**: Place the generated shared object file on the java native library path\n    This is set using the java.library.path java system property, i.e. using the ```-Djava.library.path=...``` command line argument. \n    If not provided, this property usually defaults to the system library path.\n    \n</a>","url":"https://raw.githubusercontent.com/usdot-jpo-ode/per-xer-codec/master/README.md"},"releases":0,"repository":"per-xer-codec","repository_url":"https://github.com/usdot-jpo-ode/per-xer-codec","stage_id":"23056647_119436284","stars":1,"suggest":[{"input":["per-xer-codec"],"output":"per-xer-codec# name"},{"input":["per-xer-codec"],"output":"per-xer-codec# name"},{"input":["JNI","Wrapper","for","SEMI","ASN1","J2735","Extensions"],"output":"per-xer-codec# description"},{"input":["Java","C","Makefile","Shell"],"output":"per-xer-codec# languages"},{"input":["andrewm-aero"],"output":"per-xer-codec# contributors"}],"updated_at":"2018-01-24T14:38:06Z","watchers":8}}
{"_index":"projects","_type":"project","_id":"23056647_131851429","_score":1,"_source":{"commits":4,"contributors":1,"contributors_list":[{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"}],"created_at":"2018-05-02T13:03:53Z","forks":{"forkedRepos":[]},"full_name":"usdot-jpo-ode/scms-asn1","languages":{},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"This repository contains the ASN.1 definitions for data containers and protocols used in SCMS.","project_name":"scms-asn1","rank":33,"readMe":{"content":"# scms-asn1\n\nThis repository contains the ASN.1 definitions for data containers and protocols\nused in SCMS.\n\n## Initializing the Git Repository\n\nIt's important to note that this repository contains a Git submodule (i.e. a\ndependency on the 1609.2 public repository). Therefore, doing a simple Git\nclone is not enough to pull down the entire repo.\n\nInstructions to clone the SCMS-ASN1 repository are as follows:\n\n```git clone https://github.com/usdot-jpo-ode/scms-asn1.git```, where \n'<username>' is your github username.\n\n\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/scms-asn1/master/README.md"},"releases":0,"repository":"scms-asn1","repository_url":"https://github.com/usdot-jpo-ode/scms-asn1","stage_id":"23056647_131851429","stars":0,"suggest":[{"input":["scms-asn1"],"output":"scms-asn1# name"},{"input":["scms-asn1"],"output":"scms-asn1# name"},{"input":["This","repository","contains","the","ASN1","definitions","for","data","containers","and","protocols","used","in","SCMS"],"output":"scms-asn1# description"},{"input":[],"output":"scms-asn1# languages"},{"input":["hmusavi"],"output":"scms-asn1# contributors"}],"updated_at":"2018-05-02T20:44:36Z","watchers":6}}
{"_index":"projects","_type":"project","_id":"23056647_95809284","_score":1,"_source":{"commits":13,"contributors":3,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"},{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"}],"created_at":"2017-06-29T18:49:41Z","forks":{"forkedRepos":[]},"full_name":"usdot-jpo-ode/usdot-jpo-ode.github.io","language":"HTML","languages":{"HTML":"720989"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"DOCUMENTATION: Static Website that highlights the Rest API for the ODE","project_name":"usdot-jpo-ode.github.io","rank":58,"readMe":{"content":"# usdot-jpo-ode.github.io\nDOCUMENTATION: Static Website that highlights the Rest API for the ODE\n\nLink: [usdot-jpo-ode.github.io](https://usdot-jpo-ode.github.io/)\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/usdot-jpo-ode.github.io/master/README.md"},"releases":0,"repository":"usdot-jpo-ode.github.io","repository_url":"https://github.com/usdot-jpo-ode/usdot-jpo-ode.github.io","stage_id":"23056647_95809284","stars":2,"suggest":[{"input":["usdot-jpo-odegithubio"],"output":"usdot-jpo-odegithubio# name"},{"input":["usdot-jpo-ode.github.io"],"output":"usdot-jpo-odegithubio# name"},{"input":["DOCUMENTATION","Static","Website","that","highlights","the","Rest","API","for","the","ODE"],"output":"usdot-jpo-odegithubio# description"},{"input":["HTML"],"output":"usdot-jpo-odegithubio# languages"},{"input":["mvs5465","tonychen091","hmusavi"],"output":"usdot-jpo-odegithubio# contributors"}],"updated_at":"2018-07-22T16:32:51Z","watchers":6}}
{"_index":"projects","_type":"project","_id":"23056647_88916902","_score":1,"_source":{"commits":122,"contributors":4,"contributors_list":[{"avatar_url":"https://avatars3.githubusercontent.com/u/1867490?v=4","profile_url":"https://github.com/aferber","user_type":"User","username":"aferber"},{"avatar_url":"https://avatars0.githubusercontent.com/u/1124162?v=4","profile_url":"https://github.com/jmcarter9t","user_type":"User","username":"jmcarter9t"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"}],"created_at":"2017-04-20T22:46:26Z","forks":{"forkedRepos":[{"id":"18469242_138419780","name":"jpo-cvdp","org_name":"pir8aye"},{"id":"13427284_116835764","name":"jpo-cvdp","org_name":"wayties"},{"id":"5230957_102653689","name":"jpo-cvdp","org_name":"daheise"},{"id":"10130982_91606154","name":"jpo-cvdp","org_name":"hmusavi"}]},"full_name":"usdot-jpo-ode/jpo-cvdp","language":"C++","languages":{"Batchfile":"173","C":"30710","C++":"1619956","CMake":"6836","Dockerfile":"1245","Python":"40456","Shell":"9368"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"SUBMODULE: Connected Vehicle Data Privacy module for the USDOT ITS JPO data programs. Filters geolocations using geofencing and certain data fields. Also redacts fields based on definable conditions.","project_name":"jpo-cvdp","rank":199,"readMe":{"content":"Master: [![Build Status](https://travis-ci.org/usdot-jpo-ode/jpo-cvdp.svg?branch=master)](https://travis-ci.org/usdot-jpo-ode/jpo-cvdp) [![Quality Gate](https://sonarqube.com/api/badges/gate?key=jpo-cvdp-key)](https://sonarqube.com/dashboard?id=jpo-cvdp-key)\n\n# jpo-cvdp\n\nThe United States Department of Transportation Joint Program Office (JPO)\nConnected Vehicle Data Privacy (CVDP) Project is developing a variety of methods\nto enhance the privacy of individuals who generated connected vehicle data.\n\nConnected vehicle technology uses in-vehicle wireless transceivers to broadcast\nand receive basic safety messages (BSMs) that include accurate spatiotemporal\ninformation to enhance transportation safety. Integrated Global Positioning\nSystem (GPS) measurements are included in BSMs.  Databases, some publicly\navailable, of BSM sequences, called trajectories, are being used to develop\nsafety and traffic management applications. **BSMs do not contain explicit\nidentifiers that link trajectories to individuals; however, the locations they\nexpose may be sensitive and associated with a very small subset of the\npopulation; protecting these locations from unwanted disclosure is extremely\nimportant.** Developing procedures that minimize the risk of associating\ntrajectories with individuals is the objective of this project.\n\n# The Operational Data Environment (ODE) Privacy Protection Module (PPM)\n\nThe PPM operates on streams of raw BSMs generated by the ODE. It determines\nwhether individual BSMs should be retained or suppressed (deleted) based on the\ninformation in that BSM and auxiliary map information used to define a geofence.\nBSM geoposition (latitude and longitude) and speed are used to determine the\ndisposition of each BSM processed. The PPM also redacts other BSM fields.\n\n## PPM Limitations\n\nProtecting against inference-based privacy attacks on spatiotemporal\ntrajectories (i.e., sequences of BSMs from a single vehicle) in **general** is\na challenging task. An example of an inference-based privacy attack is\nidentifying the driver that generated a sequence of BSMs using specific\nlocations they visit during their trip, or other features discernable from the\ninformation in the BSM sequence. **This PPM treats a specific use case: a\ngeofenced area where residences do not exist, e.g., a highway corridor, with\ncertain speed restrictions.** Do not assume this strategy will work in general.\nThere are alternative strategies that must be employed to handle cases where\nloitering locations can aid in learning the identity of the driver.\n\n## Table of Contents\n\n1. [Release Notes](#release-notes)\n2. [Documentation](#documentation)\n3. [Development and Collaboration Tools](#development-and-collaboration-tools)\n3. [Getting Started](#getting-started)\n4. [Installation](docs/installation.md)\n5. [Configuration and Operation](docs/configuration.md)\n6. [Testing](docs/testing.md)\n7. [Development](docs/coding-standards.md)\n\n## Release Notes\n\n### ODE Sprint 38\n\n- ODE-771: Fixed reported bug where the PPM exits when connections to Kafka brokers fail.\n\n### ODE Sprint 15\n\n- ODE-369/ORNL-15: Logging\n- Updated Identifier Redactor to include random assignment in lieu of fixed assignment.\n\n### ODE Sprint 14\n\n- ORNL-17: USDOT Playbook\n\n### ODE Sprint 13\n\n- ODE-290: Integration with the ODE.\n\n### ODE Sprint 12\n\n- ODE-77: Complete documentation\n\n### ODE Sprint 11\n\n- (Partial Complete) ODE-282 Implement a Module that Interfaces with the ODE.\n- (Partially Complete) ODE-77 Implement a PPM that uses a Geofence to Filter BSMs.\n\n# Documentation\n\nThe following document will help practitioners build, test, deploy, and understand the PPM's functions:\n\n- [Privacy Protection Module User Guide](docs/ppm_user_manual.docx)\n\nAll stakeholders are invited to provide input to these documents. Stakeholders should direct all input on this document\nto the JPO Product Owner at DOT, FHWA, or JPO. To provide feedback, we recommend that you create an \"issue\" in this\nrepository (https://github.com/usdot-jpo-ode/jpo-cvdp/issues). You will need a GitHub account to create an issue. If you\ndon’t have an account, a dialog will be presented to you to create one at no cost.\n\n## Code Documentation\n\nCode documentation can be generated using [Doxygen](https://www.doxygen.org) by following the commands below:\n\n```bash\n$ sudo apt install doxygen\n$ cd <install root>/jpo-cvdp\n$ doxygen\n```\n\nThe documentation is in HTML and is written to the `<install root>/jpo-cvdp/docs/html` directory. Open `index.html` in a\nbrowser.\n\n# Development and Collaboration Tools\n\n## Source Repositories - GitHub\n\n- https://github.com/usdot-jpo-ode/jpo-cvdp\n- `git@github.com:usdot-jpo-ode/jpo-cvdp.git`\n\n## Agile Project Management - Jira\nhttps://usdotjpoode.atlassian.net/secure/Dashboard.jspa\n\n## Continuous Integration and Delivery\n\nThe PPM is tested using [Travis Continuous Integration](https://travis-ci.org).\n\n# Getting Started\n\n## Prerequisites\n\nYou will need Git to obtain the code and documents in this repository.\nFurthermore, we recommend using Docker to build the necessary containers to\nbuild, test, and experiment with the PPM. The [Docker](#docker) instructions can be found in that section.\n\n- [Git](https://git-scm.com/)\n- [Docker](https://www.docker.com)\n\nYou can find more information in our [installation and setup](docs/installation.md) directions.\n\n## Getting the Source Code\n\nSee the installation and setup instructions unless you just want to examine the code.\n\n**Step 1.** Disable Git `core.autocrlf` (Only the First Time)\n\n   **NOTE**: If running on Windows, please make sure that your global git config is\n   set up to not convert End-of-Line characters during checkout. This is important\n   for building docker images correctly.\n\n```bash\ngit config --global core.autocrlf false\n```\n\n**Step 2.** Clone the source code from GitHub repositories using Git commands:\n\n```bash\ngit clone https://github.com/usdot-jpo-ode/jpo-cvdp.git\n```\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-cvdp/master/README.md"},"releases":0,"repository":"jpo-cvdp","repository_url":"https://github.com/usdot-jpo-ode/jpo-cvdp","stage_id":"23056647_88916902","stars":7,"suggest":[{"input":["jpo-cvdp"],"output":"jpo-cvdp# name"},{"input":["jpo-cvdp"],"output":"jpo-cvdp# name"},{"input":["SUBMODULE","Connected","Vehicle","Data","Privacy","module","for","the","USDOT","ITS","JPO","data","programs","Filters","geolocations","using","geofencing","and","certain","data","fields","Also","redacts","fields","based","on","definable","conditions"],"output":"jpo-cvdp# description"},{"input":["Shell","Batchfile","Python","C","C++","CMake","Dockerfile"],"output":"jpo-cvdp# languages"},{"input":["aferber","jmcarter9t","hmusavi","tonychen091"],"output":"jpo-cvdp# contributors"}],"updated_at":"2018-11-14T14:05:26Z","watchers":9}}
{"_index":"projects","_type":"project","_id":"23056647_95120750","_score":1,"_source":{"commits":45,"contributors":4,"contributors_list":[{"avatar_url":"https://avatars0.githubusercontent.com/u/549261?v=4","profile_url":"https://github.com/tonychen091","user_type":"User","username":"tonychen091"},{"avatar_url":"https://avatars0.githubusercontent.com/u/12912578?v=4","profile_url":"https://github.com/mvs5465","user_type":"User","username":"mvs5465"},{"avatar_url":"https://avatars2.githubusercontent.com/u/10130982?v=4","profile_url":"https://github.com/hmusavi","user_type":"User","username":"hmusavi"},{"avatar_url":"https://avatars1.githubusercontent.com/u/29437753?v=4","profile_url":"https://github.com/vmayorskiy-al","user_type":"User","username":"vmayorskiy-al"}],"created_at":"2017-06-22T13:52:15Z","forks":{"forkedRepos":[{"id":"13427284_116835838","name":"jpo-s3-deposit","org_name":"wayties"}]},"full_name":"usdot-jpo-ode/jpo-s3-deposit","language":"Java","languages":{"Dockerfile":"808","Java":"12137"},"organization":{"org_avatar_url":"https://avatars2.githubusercontent.com/u/23056647?v=4","org_type":"Organization","organization":"usdot-jpo-ode","organization_url":"https://github.com/usdot-jpo-ode"},"origin":"PUBLIC","project_description":"SUBMODULE: Generic Kafka stream to S3 depositing modules. Packages JSON kafka streams into files for depositing into research data environments.","project_name":"jpo-s3-deposit","rank":96,"readMe":{"content":"# AWS Deposit Service\n\nThis project is intended to serve as a  consumer application to subscribe to a Kafka topic of streaming JSON, package the results as a JSON file, and deposits the resulting file into a predetermined Firehose/Kinesis or S3 bucket. This runs alongside the ODE and when deployed using Docker Compose, runs in a Docker container.\n\n## Quick Run\nThe use of AWS credentials is being read from the machine's environmental variables. You may also set them in your bash profile. Note that when using Docker Compose from the main `jpo-ode` repository, these variables are set in the `.env` present in that repo.\n\n```\nexport AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY>\nexport AWS_SECRET_ACCESS_KEY=<AWS_SECRET_KEY>\n```\n\nThe project needs to be compiled with assembly to ensure that that resulting jar is runnable with the Kafka libraries. It will produce a jar under `target/` with a \"with-dependencies\" tag.\n\n```\nmvn clean compile assembly:single install\n```\n\nTo run the jar, be sure to include the topic at the end and group id at the end. If this is not a distributed system, the group can be any string.\n\n```\njava -jar target/jpo-aws-depositor-0.0.1-SNAPSHOT-jar-with-dependencies.jar   \n\nusage: Consumer Example\n -s,--bootstrap-server <arg>   Endpoint ('ip:port')\n -d,--destination <arg>        Destination (Optional, defaults to Kinesis/Firehose, put \"s3\" to override) \n -g,--group <arg>              Consumer Group\n -k,--key_name <arg>           Key Name\n -b,--bucket-name <arg>        Bucket Name\n -t,--topic <arg>              Topic Name\n -type,--type <arg>            string|byte message type\n```\nExample Usage As Of: 3/2/18\n\n``` \njava -jar target/jpo-aws-depositor-0.0.1-SNAPSHOT-jar-with-dependencies.jar --bootstrap-server 192.168.1.1:9092 -g group1 -t topic.OdeTimJson -b test-bucket-name -k \"bsm/ingest/bsm-\"\n```\n\nIt should return the following confirmation\n\n```\nDEBUG - Bucket name: test-usdot-its-cvpilot-wydot-bsm\nDEBUG - Key name: bsm/ingest/wydot-bsm-\nDEBUG - Kafka topic: topic.OdeBsmJson\nDEBUG - Type: string\nDEBUG - Destination: null\n\nSubscribed to topic OdeTimJson \n```\nTriggering an upload into the ODE, the output should be seen decoded into JSON in the console.\n\n![CLI-output](images/cli-output.png)\n\n## Additional Resources\n\nWith the Kafka installed locally on a machine, here are a few additional commands that may be helpful while debugging Kafka topics.\n\n[Kafka Install Instructions](https://www.cloudera.com/documentation/kafka/latest/topics/kafka_installing.html#concept_ngx_4l4_4r)\n\nThe IP used is the location of the Kafka endpoints.\n\n#### Create, alter, list, and describe topics.\n\n```\nkafka-topics --zookeeper 192.168.1.151:2181 --list\nsink1\nt1\nt2\n```\n\n#### Read data from a Kafka topic and write it to standard output. \n\n```\nkafka-console-consumer --zookeeper 192.168.1.151:2181 --topic topic.J2735Bsm\n```\n\n#### Push data from standard output and write it into a Kafka topic. \n\n```\nkafka-console-producer --broker-list 192.168.1.151:9092 --topic topic.J2735Bsm \n```\n","url":"https://raw.githubusercontent.com/usdot-jpo-ode/jpo-s3-deposit/master/README.md"},"releases":0,"repository":"jpo-s3-deposit","repository_url":"https://github.com/usdot-jpo-ode/jpo-s3-deposit","stage_id":"23056647_95120750","stars":1,"suggest":[{"input":["jpo-s3-deposit"],"output":"jpo-s3-deposit# name"},{"input":["jpo-s3-deposit"],"output":"jpo-s3-deposit# name"},{"input":["SUBMODULE","Generic","Kafka","stream","to","S3","depositing","modules","Packages","JSON","kafka","streams","into","files","for","depositing","into","research","data","environments"],"output":"jpo-s3-deposit# description"},{"input":["Java","Dockerfile"],"output":"jpo-s3-deposit# languages"},{"input":["tonychen091","mvs5465","hmusavi","vmayorskiy-al"],"output":"jpo-s3-deposit# contributors"}],"updated_at":"2018-11-09T20:13:24Z","watchers":7}}
